//------------------------------------------------
//--- 010 Editor v9.0.1 Binary Template
//
//      File: IGI2_MEF.bt
//   Authors: Rotari Artiom
//   Version: 1.0
//   Purpose: 
//  Category: Game
// File Mask: ILFF
//  ID BYTEs: 
//   History: 
//------------------------------------------------


#include "../COMMON/TYPES.bt";
#include "../COMMON/ILFF.bt";
#include "../COMMON/ALIGNMENT.bt";
#include "../COMMON/STRINGS.bt";
#include "../COMMON/VECTORS.bt";
#include "../COMMON/DATETIME.bt";



LittleEndian();


enum <U4> MT
{
    MODEL_RIGID    = 0,
    MODEL_BONE     = 1,
    MODEL_LIGHTMAP = 3,
};


typedef struct HSEM
{
    ILFF_HEADER header;

    U4 _0;
    U4 yy;  // datetime
    U4 mm;  // datetime
    U4 dd;  // datetime
    U4 hh;  // datetime
    U4 mn;  // datetime
    U4 ss;  // datetime
    U4 ms;  // datetime
    U4 mt;  // modeltype
    U4 _1;  // 0
    U4 _2;  // 0
    U4 _3;  // 0
    F4 f0;
    F4 f1;
    F4 f2;
    F4 f3;
    F4 f4;
    F4 f5;
    F4 f6;
    F4 f7;
    F4 f8;
    F4 f9;
    F4 fa;
    F4 fb;
    U4 _4;
    U4 _5;
    U4 _6;
    U4 _7;
    U4 _8;
    U4 _9;
    F4 fc;
    U2 _a;
    U2 _b;
    U2 _c;
    U2 _d;
    U2 _e;
    U2 _f;
    U1 rs[20];

    Padding();
};

// ATTACHMENT DEFINE
typedef struct ATTA
{
    ILFF_HEADER header;

    struct
    {
        CH name[16];
        F4 px;
        F4 py;
        F4 pz;
        F4 _0;
        F4 _1;
        F4 _2;
        F4 _3;
        F4 _4;
        F4 _5;
        F4 _6;
        F4 _7;
        F4 _8;
        S4 _9;
    } attachment[header.datasize / 68];

    Padding();
};

// MAGIC VERTICES
typedef struct XTVM
{
    ILFF_HEADER header;

    struct
    {
        F4 px;
        F4 py;
        F4 pz;
        S4 _0;
    } vertex[header.datasize / 16];

    Padding();
};

// PORTAL DEFINE
typedef struct TROP
{
    ILFF_HEADER header;

    struct
    {
        U4 o_vertex;
        U4 n_vertex;
        U4 o_face;
        U4 n_face;
        U4 id;
    } portal[header.datasize / 20];

    Padding();
};

// PORTAL VERTICES
typedef struct XVTP
{
    ILFF_HEADER header;

    struct
    {
        F4 px;
        F4 py;
        F4 pz;
    } vertex[header.datasize / 12];

    Padding();
};

// PORTAL FACES
typedef struct CFTP
{
    ILFF_HEADER header;

    struct
    {
        U4 a;
        U4 b;
        U4 c;
    } face[header.datasize / 12];

    Padding();
};

// RENDER MESH HEADER
typedef struct D3DR
{
    ILFF_HEADER header;

    switch(igi1_mef.hsem.mt)
    {
        case 0:
            U4 _0;     // 4
            U4 fn;     // face num
            U4 mn;     // mesh num
            U4 vn;     // vert num
            U4 rs[8];  // 0
        break;

        case 1:
            U4 _0;     // 4
            U4 fn;     // face num
            U4 mn;     // mesh num
            U4 v0;     // vert num 0
            U4 v1;     // vert num 1
            U4 vn;     // vert num
            U4 rs[8];  // 0
        break;

        case 3:
            U4 _0;     // 4
            U4 ln;     // lmap num
            U4 fn;     // face num
            U4 mn;     // mesh num
            U4 vn;     // vert num
            U4 _5;     // 0
            U4 _6;     // 
            U4 rs[7];  // 0
        break;
    }

    Padding();
};

// RENDER MESH DEFINE
typedef struct DNER
{
    ILFF_HEADER header;

    switch(igi1_mef.hsem.mt)
    {
        case 0:
        case 1:
        struct
        {
            F4 px;
            F4 py;
            F4 pz;
            S2 fn;
            S2 fx;
            S2 _5;
            S2 vo;
            S2 vn;
            S2 _8;
            S2 _9;
            S2 _a;
            U2 face[fn];
        } mesh[igi1_mef.d3dr.mn] <optimize=false>;
        break;

        case 3:
        struct
        {
            F4 px;
            F4 py;
            F4 pz;
            S2 fn;
            S2 fx;
            S2 _5;
            S2 _6;
            S2 vo;
            S2 vn;
            S2 _9;
            S2 _a;
            S2 _b;
            S2 _c;
            U2 face[fn];
        } mesh[igi1_mef.d3dr.mn] <optimize=false>;
        break;
    }

    Padding();
};

// RENDER MESH VERTICES
typedef struct XTRV
{
    ILFF_HEADER header;

    switch(igi1_mef.hsem.mt)
    {
        case 0:
        struct
        {
            F4 px;
            F4 py;
            F4 pz;
            F4 _3;
            F4 _4;
            F4 _5;
            F4 u0;
            F4 v0;
        } vertex[header.datasize / 32];
        break;

        case 1:
        case 3:
        struct
        {
            F4 px;
            F4 py;
            F4 pz;
            F4 _3;
            F4 _4;
            F4 _5;
            F4 u0;
            F4 v0;
            F4 u1;
            F4 v1;
        } vertex[header.datasize / 40];
        break;
    }

    Padding();
};

// RENDER MESH LIGHTMAPS
typedef struct PMTL
{
    ILFF_HEADER header;

    struct
    {
        U2 _0;  // 
        U2 _1;  // 
        U2 _2;  // 
        U2 _3;  // 
    } unk[header.datasize / 8];

    Padding();
};

// COLLISION MESH HEADER
typedef struct HSMC
{
    ILFF_HEADER header;

    struct
    {
        U4 fn;  //
        U4 vn;  //
        U4 mn;  //
        U4 sn;  //
        U4 _0;  // 0
        U4 _1;  // 0
        U4 _2;  // 0
        U4 _3;  // 0
    } cmesh[2];

    Padding();
};

// COLLISION MESH VERTICES
typedef struct XTVC
{
    ILFF_HEADER header;

    struct
    {
        F4 _0;
        F4 _1;
        F4 _2;
        F4 _3;
    } vertex[header.datasize / 16];

    Padding();
};

// COLLISION MESH FACES
typedef struct ECFC
{
    ILFF_HEADER header;

    struct
    {
        U2 _0;
        U2 _1;
        U2 _2;
        U2 _3;
    } face[header.datasize / 8];

    Padding();
};

// COLLISION MESH MATERIALS
typedef struct TAMC
{
    ILFF_HEADER header;

    struct
    {
        S2 _0;
        S2 _1;
        S2 _2;
        S2 _3;
        S2 _4;
        S2 _5;
    } material[header.datasize / 12];

    Padding();
};

// COLLISION MESH SPH
typedef struct HPSC
{
    ILFF_HEADER header;

    struct
    {
        F4 _0;  // -257428.67  645599.25
        F4 _1;  // -389401.2   391259.34
        F4 _2;  // -497025.03  485629.94
        F4 _3;  //  2.938633   516600.06
        S2 _4;  // -1          3287
        S2 _5;  //  0          1
        S2 _6;  //  0          6573
        S2 _7;  //  0          6574
    } sph [header.datasize / 24];

    Padding();
};

// TXAN
typedef struct TXAN
{
    ILFF_HEADER header;

    U1 _0[header.datasize];

    Padding();
};




struct
{
    ILFF_HEADER header;
    CH formatid[4];  // OCEM

    while(FTell() < FileSize())
    {
        switch(ReadString(FTell(), 4))
        {
            case "HSEM": HSEM hsem; break;
            case "ATTA": ATTA atta; break;
            case "XTVM": XTVM xtvm; break;
            case "TROP": TROP trop; break;
            case "XVTP": XVTP xvtp; break;
            case "CFTP": CFTP cftp; break;
            case "D3DR": D3DR d3dr; break;
            case "DNER": DNER dner; break;
            case "XTRV": XTRV xtrv; break;
            case "PMTL": PMTL pmtl; break;
            case "HSMC": HSMC hsmc; break;
            case "XTVC": XTVC xtvc; break;
            case "ECFC": ECFC ecfc; break;
            case "TAMC": TAMC tamc; break;
            case "HPSC": HPSC hpsc; break;
            case "TXAN": TXAN txan; break;
            default: Assert(false, "Parsing error: unhandled block type");
        }
    }
} igi1_mef;


Assert(FEof(), "Parsing error: expected end of file");
